name: Unity WebGL Automatic Build ðŸ‘½âœ¨ðŸš€

on:
  push:
    branches:
      - '1-configure-as-a-unity-package'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Unity Build ðŸ‘½
    runs-on: ubuntu-latest
    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}

      # Git LFS: Create file list and restore cache
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
          restore-keys: |
            ${{ runner.os }}-lfs-

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # Cache Unity Library
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # Pull Unity image and Build project using Unity Builder
      - name: Build project
        run: |
          docker pull unityci/editor:ubuntu-2022.3.54f1-webgl-3.1.0  # Ensure the correct image is pulled
          docker run --rm \
            -v $GITHUB_WORKSPACE:/workspace \
            -e UNITY_LICENSE=$UNITY_LICENSE \
            -e UNITY_EMAIL=$UNITY_EMAIL \
            -e UNITY_PASSWORD=$UNITY_PASSWORD \
            -e UNITY_SERIAL=$UNITY_SERIAL \
            -e UNITY_VERSION=2022.3.10f1 \
            -e BUILD_PATH=$BUILD_PATH \
            -e BUILD_NAME=WebGL \
            -e BUILD_TARGET=WebGL \
            unityci/editor:ubuntu-2022.3.54f1-webgl-3.1.01 /bin/bash -c "/workspace/entrypoint.sh"
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          BUILD_PATH: ${{ secrets.BUILD_PATH }}
          GITHUB_WORKSPACE: ${{ github.workspace }}

      # Upload build artifact
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: ${{ secrets.BUILD_PATH }}

      # Stash build result and reset local changes
      - name: Stash build result and reset local changes
        run: |
          echo "Applying initial configs"
          sudo chown -R $USER:$USER ${{ secrets.BUILD_PATH }}
          git config --global user.email "${{ secrets.GH_EMAIL }}"
          git config --global user.name "${{ secrets.GH_USERNAME }}"
          git add ${{ secrets.BUILD_PATH }}/${{ secrets.TARGET_PLATFORM }}
          git stash push ${{ secrets.BUILD_PATH }}/${{ secrets.TARGET_PLATFORM }}
          git reset --hard
          sudo git clean -d -x -f

      # Clean and reset the gh-pages branch
      - name: Cleaning gh-pages branch
        run: |
          echo "Switch to ${{ secrets.DEPLOYMENT_BRANCH }}"
          git switch -f ${{ secrets.DEPLOYMENT_BRANCH }}
          git reset --hard
          sudo git clean -d -x -f
          rm -r *
          git add *
          git commit -m "cleaning branch"
          git push

      # Applying stashed files to gh-pages
      - name: Applying stashed files to ${{ secrets.DEPLOYMENT_BRANCH }}
        run: |
          echo "Applying stash"
          git stash apply stash@{0}

      # Copying files to the root directory
      - name: Copying files to root directory
        run: |
          cd ${{ secrets.BUILD_PATH }}/${{ secrets.TARGET_PLATFORM }}/${{ secrets.TARGET_PLATFORM }}
          ls
          cp -r * ../../../
          cd ../../../
          rm -r ${{ secrets.BUILD_PATH }}
          ls
          pwd

      # Pushing deployment to gh-pages branch
      - name: Pushing deployment to gh-pages branch
        run: |
          pwd
          git status
          git add *
          git commit -m "Deployment"
          git push
        env:
          GH_TOKEN: ${{ secrets.PAT }}  # Use the authentication token for git push
